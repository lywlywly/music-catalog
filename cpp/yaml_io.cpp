#include "yaml_io.hpp"

bool is_yaml_sensitive(const std::string &s)
{
    static const std::regex yaml_bool(R"(^(true|false|yes|no|on|off|null|~)$)", std::regex::icase); // needs to use group due to operator precedence
    static const std::regex yaml_num(R"(^[-+]?[0-9]+(\.[0-9]+)?$)");
    return std::regex_match(s, yaml_bool) || std::regex_match(s, yaml_num);
}

void emit_string(YAML::Emitter &out, const std::string &s)
{
    if (is_yaml_sensitive(s))
    {
        out << YAML::DoubleQuoted << s;
    }
    else
    {
        out << s;
    }
}

void emit_string_vector(YAML::Emitter &out, const std::vector<std::string> &vec)
{
    out << YAML::BeginSeq;
    for (const auto &s : vec)
        emit_string(out, s);
    out << YAML::EndSeq;
}

void emit_song(YAML::Emitter &out, const Song &s)
{
    out << YAML::BeginMap;

    out << YAML::Key << "title";
    emit_string(out, s.title);
    out << YAML::Key << "artist";
    emit_string_vector(out, s.artist);
    out << YAML::Key << "album";
    emit_string(out, s.album);
    out << YAML::Key << "genre";
    emit_string_vector(out, s.genre);
    out << YAML::Key << "date_added";
    emit_string(out, s.date_added);

    out << YAML::EndMap;
}

void write_songs_to_yaml(const std::vector<Song> &songs, const std::string &filename)
{
    // Get local time with timezone offset
    std::time_t now = std::time(nullptr);
    std::tm local_tm = *std::localtime(&now);

    // Compute UTC offset (local - UTC) in seconds
    std::tm utc_tm = *std::gmtime(&now);
    int offset_seconds = std::mktime(&local_tm) - std::mktime(&utc_tm);
    int offset_hours = offset_seconds / 3600;
    int offset_minutes = std::abs(offset_seconds / 60 % 60);

    std::ostringstream time_info;
    time_info << std::put_time(&local_tm, "%Y-%m-%d %H:%M:%S");
    time_info << (offset_seconds >= 0 ? " +" : " -")
              << std::setw(2) << std::setfill('0') << std::abs(offset_hours)
              << ":" << std::setw(2) << std::setfill('0') << offset_minutes;

    YAML::Emitter out;
    out << YAML::BeginSeq;
    for (const auto &song : songs)
    {
        emit_song(out, song);
    }
    out << YAML::EndSeq;

    std::ofstream fout(filename);
    fout << "# Generated by music_catalog on " << time_info.str() << "\n";
    fout << "# Tracks count: " << songs.size() << "\n\n";
    fout << out.c_str();

    std::cout << "Saved " << songs.size() << " songs to " << filename << "\n";
}
